precision mediump float;
varying vec3 N;
varying vec3 vPoint;
varying vec2 vTexCoord;
uniform vec3 uLightPos;
uniform sampler2D uTex;

void main()
{
   vec4 color;

   vec3 aux = uLightPos - vPoint;
   float dist = length(aux);
   vec3 L = normalize(aux);
   vec3 E = normalize(-vPoint);
   vec3 R = normalize(-reflect(L, N));

   const vec4 ambientColor = vec4(0.0, 0.0, 0.0, 0.0);
   const vec4 diffuseColor = vec4(0.8, 0.8, 0.8, 1.0);
   const vec4 specularColor = vec4(0.5, 0.5, 0.5, 1.0);
   const float shininess = 50.0;
   const float falloffStrength = 10.0;
   const float falloffDistance = 30.0;

   color = ambientColor;

   // diffuse
   float lambertTerm = max(dot(N, L), 0.0);
   float attenuation = clamp(1.0 - pow(dist / falloffDistance, falloffStrength), 0.0, 1.0);
   color += diffuseColor * texture2D(uTex, vTexCoord) * lambertTerm * attenuation;

   // specular
   float specular = pow(max(0.0, dot(R, E)), shininess);
   color += specularColor * specular;

   gl_FragColor = color;
}

